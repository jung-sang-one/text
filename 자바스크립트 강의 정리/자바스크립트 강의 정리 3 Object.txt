Object
number, string, boolean의 단순 자료형보다 더 복잡한 자료를 표현할 때 사용
객체를 만드는 법
중괄호 {} 를 사용해 정의 가능
객체는 속성의 집합으로 이뤄짐
각 속성은 이름과 값으로 이뤄짐
객체 정의 시 속성이름:값의 형태로 속성 정의 가능
속성의 값은 모든 자료형이 가능, object 포함
객체의 속성에 접근하는 법
객체 이름 뒤에 점(.)을 사용하고 속성 이름에 접근 할 수 있음
객체 이름 뒤에 대괄호([]) 안에 속성 이름을 문자열로 접근할 수 있음
객체의 속성의 값을 변경하는 법
객체 속성에 접근해서 변수에 값을 저장하듯이 사용

var empty_obj = {};       // 빈 오브젝트 입니다.
var book = { title : "인어공주", page : 100};

객체의 속성에 접근하는 방법은 두 가지가 있습니다.

객체이름.속성이름
객체이름["속성이름"] 아래의 예를 참고하여 문제를 해결해 보세요.
var man = { name : "홍길동", age : 20};

console.log(man.name);       // 홍길동이 출력됩니다.
console.log(man["name"]);    // 홍길동이 출력됩니다.

undefined와 null
undefined
시스템에서 어떤 변수나 속성이 정의되지 않은 경우를 표현하기 위해 사용
선언만 하고 초기화가 되지 않는 변수의 타입이나 값
객체의 정의되지 않은 속성의 타입이나 값

null
개발자가 명시적으로 아무것도 없는 비어있는 상태를 나타낼 때 사용
typeof의 결과는 object이며 값은 null

var obj = { x : 1, y : 2};
var a = null;    // 개발자가 명시적으로 정의

console.log(obj.z);     // obj에 z는 정의되지 않았으므로 undefined가 출력됩니다.
console.log(a, typeof(a));    // null 'object'가 출력됩니다.
